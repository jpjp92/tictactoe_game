// Î≥ÄÏàòÍ∞Ä Ïù¥ÎØ∏ Ï†ïÏùòÎêòÏñ¥ ÏûàÎäîÏßÄ ÌôïÏù∏ ÌõÑ ÏÑ†Ïñ∏
window.gameJS = window.gameJS || {};

// Ïù¥ÎØ∏ Ïã§ÌñâÎêòÏóàÎäîÏßÄ ÌôïÏù∏
if (!window.gameJS.initialized) {
  // Supabase ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Î•º Ï†ÑÏó≠ Î≥ÄÏàòÎ°ú Í∞ÄÏ†∏Ïò§Í∏∞
  const supabase = window.supabaseClient;

  // DOM ÏöîÏÜå
  const gameScreen = document.getElementById('game-screen');
  const lobbyScreen = document.getElementById('lobby-screen');
  const roomTitle = document.getElementById('room-title');
  const gameBoard = document.getElementById('game-board');
  const statusText = document.getElementById('status');
  const player1Info = document.getElementById('player1-info');
  const player2Info = document.getElementById('player2-info');
  const player1Name = document.getElementById('player1-name');
  const player2Name = document.getElementById('player2-name');
  const leaveGameButton = document.getElementById('leave-game');

  // Í≤åÏûÑ ÏÉÅÌÉú Î≥ÄÏàò
  let currentGame = null;
  let currentPlayer = null;
  let boardSize = 3;
  let cells = [];
  let gameSubscription = null;
  let isMyTurn = false;
  let playerSymbol = '';

  /**
   * Í≤åÏûÑ Ï¥àÍ∏∞Ìôî Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨Í∏∞
   */
  document.addEventListener('gameInitialize', (e) => {
    console.log('Í≤åÏûÑ Ï¥àÍ∏∞Ìôî Ïù¥Î≤§Ìä∏ ÏàòÏã†:', e.detail);
    
    const { room, player } = e.detail;
    currentGame = room;
    currentPlayer = player;
    boardSize = room.board_size || 3;
    
    // ÌòÑÏû¨ Í≤åÏûÑ ÏÉÅÌÉú ÌôïÏù∏
    console.log('Í≤åÏûÑ Ï¥àÍ∏∞Ìôî:', {
      room_id: room.id,
      boardSize,
      player: player.name,
      isHost: room.host_id === player.id,
      hasGuest: !!room.guest_id
    });
    
    // Î∞© Ï†úÎ™© ÏÑ§Ï†ï
    if (roomTitle) {
      roomTitle.textContent = room.name || 'Î∞© Ï†úÎ™© ÏóÜÏùå';
    }
    
    // ÎÇ¥Í∞Ä X(Î∞©Ïû•)Ïù∏ÏßÄ O(Í≤åÏä§Ìä∏)Ïù∏ÏßÄ ÏÑ§Ï†ï
    const isHost = room.host_id === player.id;
    playerSymbol = isHost ? 'X' : 'O';
    
    // ÌîåÎ†àÏù¥Ïñ¥ Ïù¥Î¶Ñ ÌëúÏãú
    updatePlayerInfo(room);
    
    // Í≤åÏûÑ Î≥¥Îìú Ï¥àÍ∏∞Ìôî (Î≥¥Îìú Í∑∏Î¶¨Í∏∞)
    setupGame();
    
    // Ïã§ÏãúÍ∞Ñ Í≤åÏûÑ ÏÉÅÌÉú Íµ¨ÎèÖ
    setupRealtimeGame();
    
    // ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    updateGameStatus(room);
    
    // ÎîîÎ≤ÑÍπÖÏùÑ ÏúÑÌïú DOM ÏöîÏÜå Ï∂úÎ†•
    setTimeout(checkBoardVisibility, 1000);
  });

  /**
   * ÌîåÎ†àÏù¥Ïñ¥ Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
   */
  function updatePlayerInfo(room) {
    // Î∞©Ïû• Ï†ïÎ≥¥
    if (player1Name) {
      if (room.host) {
        player1Name.textContent = room.host.name || 'Î∞©Ïû•';
      } else {
        player1Name.textContent = 'Î∞©Ïû• (Ïó∞Í≤∞ Ï§ë...)';
      }
    }
    
    // Í≤åÏä§Ìä∏ Ï†ïÎ≥¥
    if (player2Name) {
      if (room.guest_id) {
        if (room.guest) {
          player2Name.textContent = room.guest.name || 'Í≤åÏä§Ìä∏';
        } else {
          player2Name.textContent = 'Í≤åÏä§Ìä∏ (Ïó∞Í≤∞ Ï§ë...)';
        }
      } else {
        player2Name.textContent = 'ÎåÄÍ∏∞ Ï§ë...';
      }
    }
    
    // ÌôúÏÑ± ÌîåÎ†àÏù¥Ïñ¥ ÌëúÏãú
    if (player1Info && player2Info) {
      const isHost = currentPlayer.id === room.host_id;
      player1Info.classList.toggle('active', room.current_turn === room.host_id);
      player2Info.classList.toggle('active', room.current_turn === room.guest_id);
      
      // ÎÇ¥ Ï†ïÎ≥¥ Í∞ïÏ°∞
      if (isHost) {
        player1Info.classList.add('my-info');
      } else {
        player2Info.classList.add('my-info');
      }
    }
  }

  /**
   * Í≤åÏûÑ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
   */
  function updateGameStatus(room) {
    if (!statusText) return;
    
    // Í≤åÏûÑ ÏÉÅÌÉúÏóê Îî∞Îùº Î©îÏãúÏßÄ ÏÑ§Ï†ï
    if (room.status === 'waiting') {
      if (room.host_id === currentPlayer.id) {
        statusText.textContent = 'ÏÉÅÎåÄÎ∞©Ïù¥ ÏûÖÏû•ÌïòÍ∏∞Î•º Í∏∞Îã§Î¶¨Îäî Ï§ëÏûÖÎãàÎã§...';
      } else {
        statusText.textContent = 'Í≤åÏûÑ Ï§ÄÎπÑ Ï§ë...';
      }
    } else if (room.status === 'playing') {
      isMyTurn = room.current_turn === currentPlayer.id;
      statusText.textContent = isMyTurn ? 'ÎãπÏã†Ïùò ÌÑ¥ÏûÖÎãàÎã§!' : 'ÏÉÅÎåÄÎ∞©Ïùò ÌÑ¥ÏûÖÎãàÎã§';
    } else if (room.status === 'finished') {
      if (room.winner_id) {
        const isWinner = room.winner_id === currentPlayer.id;
        statusText.textContent = isWinner ? 'ÏäπÎ¶¨ÌñàÏäµÎãàÎã§! üéâ' : 'Ìå®Î∞∞ÌñàÏäµÎãàÎã§! üò¢';
      } else {
        statusText.textContent = 'Î¨¥ÏäπÎ∂ÄÏûÖÎãàÎã§! ü§ù';
      }
    }
  }

  /**
   * Í≤åÏûÑ Î≥¥Îìú Í∞ÄÏãúÏÑ± ÌôïÏù∏ (ÎîîÎ≤ÑÍπÖÏö©)
   */
  function checkBoardVisibility() {
    if (gameBoard) {
      console.log('Í≤åÏûÑ Î≥¥Îìú ÏöîÏÜå Ïä§ÌÉÄÏùº:', {
        display: getComputedStyle(gameBoard).display,
        width: getComputedStyle(gameBoard).width,
        height: getComputedStyle(gameBoard).height,
        children: gameBoard.children.length,
        visibility: getComputedStyle(gameBoard).visibility,
        opacity: getComputedStyle(gameBoard).opacity
      });
      
      // Î≥¥ÎìúÍ∞Ä Î≥¥Ïù¥ÏßÄ ÏïäÏúºÎ©¥ Ïä§ÌÉÄÏùº Í∞ïÏ†ú Ï†ÅÏö©
      if (getComputedStyle(gameBoard).display === 'none') {
        gameBoard.style.display = 'grid';
        gameBoard.style.visibility = 'visible';
        gameBoard.style.opacity = '1';
        console.log('Í≤åÏûÑ Î≥¥Îìú Í∞ÄÏãúÏÑ± ÏàòÏ†ï Ï†ÅÏö©Îê®');
      }
    } else {
      console.error('Í≤åÏûÑ Î≥¥Îìú ÏöîÏÜåÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏùå!');
    }
  }

  /**
   * Í≤åÏûÑ Ï¥àÍ∏∞ ÏÑ§Ï†ï
   */
  const setupGame = () => {
    console.log('Í≤åÏûÑ Î≥¥Îìú Ï¥àÍ∏∞Ìôî ÏãúÏûë');
    
    // gameBoard ÏöîÏÜåÍ∞Ä Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏
    if (!gameBoard) {
      console.error('Í≤åÏûÑ Î≥¥Îìú ÏöîÏÜåÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§!');
      return;
    }
    
    // Î≥¥Îìú ÌÅ¨Í∏∞ ÏÑ§Ï†ï
    gameBoard.innerHTML = '';
    
    // Í≤åÏûÑ Î≥¥Îìú Ïä§ÌÉÄÏùº ÏßÅÏ†ë ÏÑ§Ï†ï
    gameBoard.style.gridTemplateColumns = `repeat(${boardSize}, 1fr)`;
    gameBoard.style.display = 'grid';
    gameBoard.style.width = '100%';
    gameBoard.style.maxWidth = boardSize === 3 ? '300px' : '400px';
    gameBoard.style.margin = '20px auto';
    gameBoard.style.padding = '10px';
    gameBoard.style.gap = '10px';
    gameBoard.style.background = 'rgba(0, 0, 0, 0.05)';
    gameBoard.style.borderRadius = '8px';
    gameBoard.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.1)';
    
    // Ï¥àÍ∏∞ Î≥¥Îìú ÏÉÅÌÉú ÏÑ§Ï†ï (Ïù¥ÎØ∏ Î≥¥Îìú ÏÉÅÌÉúÍ∞Ä ÏûàÏúºÎ©¥ ÏÇ¨Ïö©, ÏóÜÏúºÎ©¥ Îπà Î∞∞Ïó¥ ÏÉùÏÑ±)
    if (!cells || !cells.length || cells.length !== boardSize * boardSize) {
      cells = Array(boardSize * boardSize).fill('');
    }
    
    // Î≥¥Îìú Í∑∏Î¶¨Í∏∞
    drawBoard();
    console.log('Í≤åÏûÑ Î≥¥Îìú Ï¥àÍ∏∞Ìôî ÏôÑÎ£å:', { boardSize, cells });
  };

  /**
   * Ïã§ÏãúÍ∞Ñ Í≤åÏûÑ Íµ¨ÎèÖ ÏÑ§Ï†ï
   */
  const setupRealtimeGame = () => {
    // Ïù¥Ï†Ñ Íµ¨ÎèÖÏù¥ ÏûàÏúºÎ©¥ Ìï¥Ï†ú
    if (gameSubscription) {
      try {
        gameSubscription.unsubscribe();
        console.log('Ïù¥Ï†Ñ Í≤åÏûÑ Íµ¨ÎèÖÏù¥ Ìï¥Ï†úÎêòÏóàÏäµÎãàÎã§.');
      } catch (e) {
        console.log('Í≤åÏûÑ Íµ¨ÎèÖ Ìï¥Ï†ú Ï§ë Ïò§Î•ò (Î¨¥Ïãú Í∞ÄÎä•):', e);
      }
      gameSubscription = null;
    }
    
    if (!currentGame || !currentGame.id) {
      console.error('‚ùå currentGameÏù¥ ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïÑ Ïã§ÏãúÍ∞Ñ Íµ¨ÎèÖÏùÑ ÏÑ§Ï†ïÌï† Ïàò ÏóÜÏäµÎãàÎã§.');
      return;
    }
    
    try {
      console.log(`üîå Í≤åÏûÑ ID: ${currentGame.id}Ïóê ÎåÄÌïú Ïã§ÏãúÍ∞Ñ Íµ¨ÎèÖ ÏÑ§Ï†ï`);
      
      // Í≥†Ïú†Ìïú Ï±ÑÎÑê ID ÏÉùÏÑ±
      const channelId = `game-${currentGame.id}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
      
      gameSubscription = supabase
        .channel(channelId)
        .on('postgres_changes', 
          { 
            event: 'UPDATE', 
            schema: 'public', 
            table: 'rooms', 
            filter: `id=eq.${currentGame.id}` 
          },
          (payload) => {
            console.log('üéÆ Í≤åÏûÑ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ ÏàòÏã†:', payload.new);
            
            try {
              // Í≤åÏûÑ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
              updateGameState(payload.new);
            } catch (updateError) {
              console.error('‚ùå Í≤åÏûÑ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë Ïò§Î•ò:', updateError);
            }
          }
        )
        .subscribe((status) => {
          console.log('üéÆ Í≤åÏûÑ Íµ¨ÎèÖ ÏÉÅÌÉú:', status);
          
          if (status === 'SUBSCRIBED') {
            console.log('‚úÖ Í≤åÏûÑ Ïã§ÏãúÍ∞Ñ Íµ¨ÎèÖÏù¥ ÏÑ±Í≥µÌñàÏäµÎãàÎã§.');
            // Íµ¨ÎèÖ ÏÑ±Í≥µ Ïãú Ï¥àÍ∏∞ Í≤åÏûÑ ÏÉÅÌÉú ÏÑ§Ï†ï
            updateGameState(currentGame);
          } else if (status === 'TIMED_OUT' || status === 'CHANNEL_ERROR') {
            console.error('‚ùå Í≤åÏûÑ Íµ¨ÎèÖ Ïã§Ìå®, Ïû¨ÏãúÎèÑ Ï§ë...', status);
            setTimeout(() => {
              setupRealtimeGame();
            }, 3000);
          }
        });
      
    } catch (error) {
      console.error('‚ùå Ïã§ÏãúÍ∞Ñ Í≤åÏûÑ Íµ¨ÎèÖ ÏÑ§Ï†ï Ïò§Î•ò:', error);
      
      // Ïò§Î•ò Î∞úÏÉù Ïãú Ïû¨ÏãúÎèÑ
      setTimeout(() => {
        console.log('üîÑ Í≤åÏûÑ Íµ¨ÎèÖ Ïû¨ÏãúÎèÑ...');
        setupRealtimeGame();
      }, 5000);
    }
  };

  /**
   * Í≤åÏûÑ Î≥¥Îìú Í∑∏Î¶¨Í∏∞
   */
  function drawBoard() {
    console.log('Í≤åÏûÑ Î≥¥Îìú Í∑∏Î¶¨Í∏∞ ÏãúÏûë');
    gameBoard.innerHTML = '';
    
    cells.forEach((cell, index) => {
      const div = document.createElement("div");
      div.className = "cell";
      div.dataset.index = index;
      
      // ÏÖÄ Ïä§ÌÉÄÏùº ÏßÅÏ†ë Ï†ÅÏö©
      div.style.backgroundColor = "rgba(255, 255, 255, 0.8)";
      div.style.borderRadius = "6px";
      div.style.boxShadow = "0 2px 5px rgba(0, 0, 0, 0.1)";
      div.style.border = "1px solid rgba(0, 0, 0, 0.05)";
      div.style.aspectRatio = "1";
      div.style.display = "flex";
      div.style.alignItems = "center";
      div.style.justifyContent = "center";
      div.style.fontSize = boardSize === 3 ? "2.5rem" : "2rem";
      div.style.fontWeight = "bold";
      div.style.cursor = "pointer";
      div.style.transition = "all 0.2s";

      if (cell === "X" || cell === "O") {
        const span = document.createElement("span");
        span.textContent = cell;
        span.className = cell === "X" ? "x" : "o";
        span.style.color = cell === "X" ? "#3b82f6" : "#ef4444";
        div.appendChild(span);
      }

      // ÏÖÄ ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏
      div.addEventListener("click", () => {
        console.log(`ÏÖÄ ${index} ÌÅ¥Î¶≠Îê®, ÌòÑÏû¨ ÌÑ¥: ${isMyTurn}, ÏÖÄ Í∞í: '${cell}'`);
        handleCellClick(index);
      });
      
      // Ìò∏Î≤Ñ Ìö®Í≥º
      div.addEventListener("mouseenter", () => {
        if (cell === '' && isMyTurn) {
          div.style.backgroundColor = "rgba(255, 255, 255, 1)";
          div.style.transform = "scale(1.05)";
        }
      });
      div.addEventListener("mouseleave", () => {
        div.style.backgroundColor = "rgba(255, 255, 255, 0.8)";
        div.style.transform = "scale(1)";
      });
      
      gameBoard.appendChild(div);
    });
    
    console.log('Í≤åÏûÑ Î≥¥Îìú Í∑∏Î¶¨Í∏∞ ÏôÑÎ£å');
  }

  /**
   * Í≤åÏûÑ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
   */
  const updateGameState = (room) => {
    // Î≥¥Îìú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    if (room.board_state) {
      try {
        // board_stateÍ∞Ä Î¨∏ÏûêÏó¥Ïù¥Î©¥ ÌååÏã±, ÏïÑÎãàÎ©¥ Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©
        cells = typeof room.board_state === 'string' 
          ? JSON.parse(room.board_state) 
          : room.board_state;
          
        // Î≥¥Îìú Îã§Ïãú Í∑∏Î¶¨Í∏∞
        drawBoard();
      } catch (e) {
        console.error('Î≥¥Îìú ÏÉÅÌÉú ÌååÏã± Ïò§Î•ò:', e);
      }
    }
    
    // Í≤åÏûÑ ÏÉÅÌÉúÏóê Îî∞Î•∏ UI ÏóÖÎç∞Ïù¥Ìä∏
    if (room.status === 'waiting') {
      statusText.textContent = 'ÏÉÅÎåÄÎ∞©ÏùÑ Í∏∞Îã§Î¶¨Îäî Ï§ë...';
      isMyTurn = false;
    } else if (room.status === 'playing') {
      // ÌòÑÏû¨ ÌÑ¥ ÌôïÏù∏
      isMyTurn = room.current_turn === currentPlayer.id;
      
      // ÌÑ¥ ÌëúÏãú ÏóÖÎç∞Ïù¥Ìä∏
      player1Info.classList.toggle('active', room.current_turn === room.host_id);
      player2Info.classList.toggle('active', room.current_turn === room.guest_id);
      
      statusText.textContent = isMyTurn ? 'ÎãπÏã†Ïùò ÌÑ¥ÏûÖÎãàÎã§!' : 'ÏÉÅÎåÄÎ∞©Ïùò ÌÑ¥ÏûÖÎãàÎã§';
      
      // ÌîåÎ†àÏù¥Ïñ¥ Ïù¥Î¶Ñ ÏóÖÎç∞Ïù¥Ìä∏
      if (room.host && player1Name) {
        player1Name.textContent = room.host.name;
      }
      if (room.guest && player2Name) {
        player2Name.textContent = room.guest.name;
      }
    } else if (room.status === 'finished') {
      gameOver(room);
    }
  };

  /**
   * ÏÖÄ ÌÅ¥Î¶≠ Ï≤òÎ¶¨
   */
  async function handleCellClick(index) {
    // ÎÇ¥ ÌÑ¥Ïù¥ ÏïÑÎãàÍ±∞ÎÇò Ïù¥ÎØ∏ Ï±ÑÏõåÏßÑ ÏÖÄÏù¥Î©¥ ÌÅ¥Î¶≠ Î¨¥Ïãú
    if (!isMyTurn || cells[index] !== '') {
      console.log('Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ÌÅ¥Î¶≠:', { isMyTurn, cellValue: cells[index] });
      return;
    }
    
    console.log(`ÏÖÄ ${index}Ïóê ${playerSymbol} ÌëúÏãú`);
    
    try {
      // Î°úÏª¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      cells[index] = playerSymbol;
      
      // ÏûÑÏãúÎ°ú Î≥¥Îìú ÏóÖÎç∞Ïù¥Ìä∏ (Ï¶âÍ∞ÅÏ†ÅÏù∏ ÌîºÎìúÎ∞±)
      drawBoard();
      
      // ÏäπÎ¶¨ ÌôïÏù∏
      const isWinner = checkWin(playerSymbol);
      const isDraw = !cells.includes('') && !isWinner; // Î™®Îì† ÏÖÄÏù¥ Ï±ÑÏõåÏ°åÍ≥† ÏäπÏûêÍ∞Ä ÏóÜÏúºÎ©¥ Î¨¥ÏäπÎ∂Ä
      
      // Í≤åÏûÑ ÏÉÅÌÉú Í≤∞Ï†ï
      const newStatus = isWinner || isDraw ? 'finished' : 'playing';
      
      // ÏÉÅÎåÄÎ∞© ID
      const opponentId = currentPlayer.id === currentGame.host_id
        ? currentGame.guest_id
        : currentGame.host_id;
      
      // Îã§Ïùå ÌÑ¥ ÏÑ§Ï†ï (Í≤åÏûÑ Ï¢ÖÎ£åÎ©¥ ÌòÑÏû¨ ÌîåÎ†àÏù¥Ïñ¥, ÏïÑÎãàÎ©¥ ÏÉÅÎåÄÎ∞©)
      const nextTurn = isWinner || isDraw ? currentPlayer.id : opponentId;
      
      // Supabase ÏóÖÎç∞Ïù¥Ìä∏
      console.log('Supabase ÏóÖÎç∞Ïù¥Ìä∏:', {
        board_state: cells,
        current_turn: nextTurn,
        status: newStatus,
        winner_id: isWinner ? currentPlayer.id : null
      });
      
      const { error } = await supabase
        .from('rooms')
        .update({
          board_state: cells,
          current_turn: nextTurn,
          status: newStatus,
          winner_id: isWinner ? currentPlayer.id : null
        })
        .eq('id', currentGame.id);
      
      if (error) throw error;
      
      // ÏûÑÏãú UI ÏóÖÎç∞Ïù¥Ìä∏ (Ï¶âÏãú ÌîºÎìúÎ∞±)
      isMyTurn = false;
      statusText.textContent = isWinner ? 'ÏäπÎ¶¨ÌñàÏäµÎãàÎã§! üéâ' : isDraw ? 'Î¨¥ÏäπÎ∂ÄÏûÖÎãàÎã§! ü§ù' : 'ÏÉÅÎåÄÎ∞©Ïùò ÌÑ¥ÏûÖÎãàÎã§';
      
      // Í≤åÏûÑÏù¥ ÎÅùÎÇòÎ©¥ ÌûàÏä§ÌÜ†Î¶¨ Ï†ÄÏû•
      if (isWinner || isDraw) {
        await saveGameHistory(isWinner ? currentPlayer.id : null);
      }
    } catch (error) {
      console.error('Í≤åÏûÑ ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò:', error);
    }
  }

  /**
   * ÏäπÎ¶¨ ÌôïÏù∏
   */
  function checkWin(symbol) {
    // Í∞ÄÎ°úÏ§Ñ ÌôïÏù∏
    for (let r = 0; r < boardSize; r++) {
      let row = true;
      for (let c = 0; c < boardSize; c++) {
        if (cells[r*boardSize + c] !== symbol) row = false;
      }
      if (row) return true;
    }
    
    // ÏÑ∏Î°úÏ§Ñ ÌôïÏù∏
    for (let c = 0; c < boardSize; c++) {
      let col = true;
      for (let r = 0; r < boardSize; r++) {
        if (cells[r*boardSize + c] !== symbol) col = false;
      }
      if (col) return true;
    }
    
    // ÎåÄÍ∞ÅÏÑ† (ÏôºÏ™Ω ÏúÑÏóêÏÑú Ïò§Î•∏Ï™Ω ÏïÑÎûò)
    let diag1 = true;
    for (let i = 0; i < boardSize; i++) {
      if (cells[i*boardSize + i] !== symbol) diag1 = false;
    }
    if (diag1) return true;
    
    // ÎåÄÍ∞ÅÏÑ† (Ïò§Î•∏Ï™Ω ÏúÑÏóêÏÑú ÏôºÏ™Ω ÏïÑÎûò)
    let diag2 = true;
    for (let i = 0; i < boardSize; i++) {
      if (cells[i*boardSize + (boardSize-1-i)] !== symbol) diag2 = false;
    }
    if (diag2) return true;
    
    return false;
  }

  /**
   * Í≤åÏûÑ Ï¢ÖÎ£å Ï≤òÎ¶¨
   */
  function gameOver(room) {
    if (room.winner_id) {
      const isWinner = room.winner_id === currentPlayer.id;
      statusText.textContent = isWinner ? 'ÏäπÎ¶¨ÌñàÏäµÎãàÎã§! üéâ' : 'Ìå®Î∞∞ÌñàÏäµÎãàÎã§! üò¢';
      
      // ÏäπÏûê ÌïòÏù¥ÎùºÏù¥Ìä∏
      const winnerPlayerInfo = room.winner_id === room.host_id ? player1Info : player2Info;
      winnerPlayerInfo.classList.add('winner');
    } else {
      statusText.textContent = "Î¨¥ÏäπÎ∂ÄÏûÖÎãàÎã§! ü§ù";
    }
  }

  /**
   * Í≤åÏûÑ ÌûàÏä§ÌÜ†Î¶¨ Ï†ÄÏû•
   */
  async function saveGameHistory(winnerId) {
    try {
      await supabase
        .from('game_history')
        .insert({
          room_id: currentGame.id,
          player1_id: currentGame.host_id,
          player2_id: currentGame.guest_id,
          winner_id: winnerId,
          board_size: boardSize,
          moves: cells
        });
    } catch (error) {
      console.error('Í≤åÏûÑ ÌûàÏä§ÌÜ†Î¶¨ Ï†ÄÏû• Ïò§Î•ò:', error);
    }
  }

  /**
   * Í≤åÏûÑ ÎÇòÍ∞ÄÍ∏∞
   */
  async function leaveGame() {
    // Íµ¨ÎèÖ Ìï¥Ï†ú
    if (gameSubscription) {
      gameSubscription.unsubscribe();
    }
    
    // Í≤åÏûÑ Ï§ëÏù¥ÏóàÎã§Î©¥ ÏÉÅÎåÄÎ∞© ÏäπÎ¶¨Î°ú Ï≤òÎ¶¨
    if (currentGame && currentGame.status === 'playing') {
      const opponentId = currentGame.host_id === currentPlayer.id
        ? currentGame.guest_id
        : currentGame.host_id;
      
      try {
        await supabase
          .from('rooms')
          .update({
            status: 'finished',
            winner_id: opponentId
          })
          .eq('id', currentGame.id);
          
        await saveGameHistory(opponentId);
      } catch (error) {
        console.error('Í≤åÏûÑ Ï¢ÖÎ£å Ïò§Î•ò:', error);
      }
    }
    
    // Î°úÎπÑÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
    gameScreen.classList.add('hidden');
    lobbyScreen.classList.remove('hidden');
  }

  // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà
  if (leaveGameButton) {
    leaveGameButton.addEventListener('click', leaveGame);
  }
  
  // Í≤åÏûÑ ÌôîÎ©¥Ïóê ÎîîÎ≤ÑÍπÖ ÎèÑÍµ¨ Ï∂îÍ∞Ä
  function addDebugTools() {
    // Ïù¥ÎØ∏ ÏûàÏúºÎ©¥ Ï∂îÍ∞ÄÌïòÏßÄ ÏïäÏùå
    if (document.getElementById('debug-tools')) return;
    
    const debugContainer = document.createElement('div');
    debugContainer.id = 'debug-tools';
    debugContainer.style.margin = '20px 0';
    debugContainer.style.padding = '10px';
    debugContainer.style.backgroundColor = 'rgba(0,0,0,0.05)';
    debugContainer.style.borderRadius = '8px';
    
    const debugTitle = document.createElement('h3');
    debugTitle.textContent = 'ÎîîÎ≤ÑÍπÖ ÎèÑÍµ¨';
    debugTitle.style.marginTop = '0';
    
    const roomIdText = document.createElement('p');
    roomIdText.textContent = `Î∞© ID: ${currentGame?.id || 'N/A'}`;
    
    const refreshButton = document.createElement('button');
    refreshButton.textContent = 'Í≤åÏûÑ ÏÉÅÌÉú ÏÉàÎ°úÍ≥†Ïπ®';
    refreshButton.onclick = async () => {
      try {
        const { data, error } = await supabase
          .from('rooms')
          .select('*, host:host_id(name), guest:guest_id(name)')
          .eq('id', currentGame.id)
          .single();
        
        if (error) throw error;
        
        console.log('ÏàòÎèô ÏÉàÎ°úÍ≥†Ïπ® Îç∞Ïù¥ÌÑ∞:', data);
        updateGameState(data);
        alert('Í≤åÏûÑ ÏÉÅÌÉúÍ∞Ä ÏÉàÎ°úÍ≥†Ïπ®ÎêòÏóàÏäµÎãàÎã§.');
      } catch (err) {
        console.error('ÏÉàÎ°úÍ≥†Ïπ® Ïò§Î•ò:', err);
      }
    };
    
    const reconnectButton = document.createElement('button');
    reconnectButton.textContent = 'Ïã§ÏãúÍ∞Ñ Íµ¨ÎèÖ Ïû¨Ïó∞Í≤∞';
    reconnectButton.style.marginLeft = '10px';
    reconnectButton.onclick = () => {
      setupRealtimeGame();
      alert('Ïã§ÏãúÍ∞Ñ Íµ¨ÎèÖÏù¥ Ïû¨ÏÑ§Ï†ïÎêòÏóàÏäµÎãàÎã§.');
    };
    
    debugContainer.appendChild(debugTitle);
    debugContainer.appendChild(roomIdText);
    debugContainer.appendChild(refreshButton);
    debugContainer.appendChild(reconnectButton);
    
    // Í≤åÏûÑ ÌôîÎ©¥Ïóê Ï∂îÍ∞Ä
    const gameScreenElement = document.getElementById('game-screen');
    if (gameScreenElement) {
      gameScreenElement.appendChild(debugContainer);
    }
  }

  // Í≤åÏûÑ Ï¥àÍ∏∞Ìôî ÌõÑ ÎîîÎ≤ÑÍπÖ ÎèÑÍµ¨ Ï∂îÍ∞Ä
  document.addEventListener('gameInitialize', () => {
    setTimeout(addDebugTools, 1500);
  });
  
  // Ïù¥ÎØ∏ Ïã§ÌñâÎêòÏóàÏùåÏùÑ ÌëúÏãú
  window.gameJS.initialized = true;
  console.log('Game JS Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
}